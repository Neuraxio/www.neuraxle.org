{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Introduction to Automatic Hyperparameter Tuning\n",
    "\n",
    "> Also known as AutoML, Automatic Machine Learning, Meta-optimization, Meta-learning, and so on.\n",
    "\n",
    "So not only you want to build neural networks and other machine learning algorithms, but also you want to find the best hyperparameters for them automatically. We'll here demonstrate how it's possible with Neuraxle. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# AutoML loop\n",
    "\n",
    "The step AutoML is a step that can execute any Automatic Machine Learning Algorithms."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1. Define your pipeline\n",
    "\n",
    "Consider multiple sklearn classifiers that each have their own hyperparms: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "from neuraxle.base import BaseTransformer\n",
    "from neuraxle.pipeline import Pipeline\n",
    "from neuraxle.hyperparams.space import HyperparameterSpace\n",
    "from neuraxle.steps.numpy import NumpyRavel\n",
    "from neuraxle.steps.output_handlers import OutputTransformerWrapper\n",
    "from typing import List\n",
    "\n",
    "# sklearn classifiers, and sklearn wrapper for neuraxle \n",
    "from neuraxle.steps.sklearn import SKLearnWrapper\n",
    "from sklearn.tree import DecisionTreeClassifier, ExtraTreeClassifier\n",
    "from sklearn.linear_model import RidgeClassifier, LogisticRegression\n",
    "\n",
    "# neuraxle distributions \n",
    "from neuraxle.hyperparams.distributions import Choice, RandInt, Boolean, LogUniform\n",
    "\n",
    "classifiers: List[BaseTransformer] = [\n",
    "    SKLearnWrapper(DecisionTreeClassifier(), HyperparameterSpace({\n",
    "            'criterion': Choice(['gini', 'entropy']),\n",
    "            'splitter': Choice(['best', 'random']),\n",
    "            'min_samples_leaf': RandInt(2, 5),\n",
    "            'min_samples_split': RandInt(1, 3)\n",
    "        })).set_name('DecisionTreeClassifier'),\n",
    "    Pipeline([\n",
    "            OutputTransformerWrapper(NumpyRavel()),\n",
    "            SKLearnWrapper(RidgeClassifier(), HyperparameterSpace({\n",
    "                'alpha': Choice([(0.0, 1.0, 10.0), (0.0, 10.0, 100.0)]),\n",
    "                'fit_intercept': Boolean(),\n",
    "                'normalize': Boolean()\n",
    "    }))\n",
    "    ]).set_name('RidgeClassifier'),\n",
    "    Pipeline([\n",
    "        OutputTransformerWrapper(NumpyRavel()),\n",
    "        SKLearnWrapper(LogisticRegression(), HyperparameterSpace({\n",
    "            'C': LogUniform(0.01, 10.0),\n",
    "            'fit_intercept': Boolean(),\n",
    "            'dual': Boolean(),\n",
    "            'penalty': Choice(['l1', 'l2']),\n",
    "            'max_iter': RandInt(20, 200)\n",
    "        }))\n",
    "    ]).set_name('LogisticRegression')\n",
    "]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Consider a pipeline that chooses one of those classifiers based on its hyperparams: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "from neuraxle.steps.flow import ChooseOneStepOf\n",
    "\n",
    "p: Pipeline = Pipeline([\n",
    "    ChooseOneStepOf(classifiers)\n",
    "])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2. Choose a validation splitter\n",
    "\n",
    "Let's pick the [ValidationSplitter](https://www.neuraxle.org/stable/api/neuraxle.metaopt.auto_ml.html?highlight=validationsplitter#neuraxle.metaopt.auto_ml.ValidationSplitter) which is enough for most machine learning problems:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "from neuraxle.metaopt.auto_ml import ValidationSplitter\n",
    "\n",
    "validation_splitter = ValidationSplitter(test_size=0.20)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This validation splitter will split the train, and test set with 80% train, and 20% validation.\n",
    "\n",
    "We have also implemented [KFoldCrossValidationSplitter](https://www.neuraxle.org/stable/api/neuraxle.metaopt.auto_ml.html?highlight=kfoldcross#neuraxle.metaopt.auto_ml.KFoldCrossValidationSplitter) if you are interested in using cross-validation for your machine learning problem."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3. Define a the main scoring metric with [ScoringCallback](https://www.neuraxle.org/stable/api/neuraxle.metaopt.callbacks.html?highlight=scoringcallback#neuraxle.metaopt.callbacks.ScoringCallback)\n",
    "\n",
    "Let's pick the accuracy score as our scoring metric: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "from neuraxle.metaopt.callbacks import ScoringCallback\n",
    "from sklearn.metrics import accuracy_score\n",
    "\n",
    "\n",
    "scoring_callback = ScoringCallback(\n",
    "    metric_function=accuracy_score, \n",
    "    name='accuracy', \n",
    "    higher_score_is_better=False,\n",
    "    print_metrics=False\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 4. Add metric callbacks with [MetricCallback](https://www.neuraxle.org/stable/api/neuraxle.metaopt.callbacks.html?highlight=metriccallback#neuraxle.metaopt.callbacks.MetricCallback) (optional)\n",
    "\n",
    "Let's add sklearn f1_score as an additional metric callback: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import mean_absolute_error\n",
    "from neuraxle.metaopt.callbacks import MetricCallback\n",
    "from sklearn.metrics import f1_score, precision_score, recall_score\n",
    "\n",
    "callbacks = [\n",
    "    MetricCallback('f1', metric_function=f1_score, higher_score_is_better=True, print_metrics=False),\n",
    "    MetricCallback('precision', metric_function=precision_score, higher_score_is_better=True, print_metrics=False),\n",
    "    MetricCallback('recall', metric_function=recall_score, higher_score_is_better=True, print_metrics=False)\n",
    "]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You could also implement your own callback for things such as EarlyStopping if you want too. You need to create a callback that inherits from [BaseCallback](https://www.neuraxle.org/stable/api/neuraxle.metaopt.callbacks.html?highlight=basecallback#neuraxle.metaopt.callbacks.BaseCallback)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 5. Select an hyperparams repository \n",
    "\n",
    "For the sake of this example, let's pick the [InMemoryHyperparamsRepository](https://www.neuraxle.org/stable/api/neuraxle.metaopt.auto_ml.html?highlight=inmemoryhyperparamsrepository#neuraxle.metaopt.auto_ml.InMemoryHyperparamsRepository) because we don't need to persist trial files:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "from neuraxle.metaopt.auto_ml import InMemoryHyperparamsRepository\n",
    "\n",
    "hyperparams_repository = InMemoryHyperparamsRepository(cache_folder='cache')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "[HyperparamsJSONRepository](https://www.neuraxle.org/stable/api/neuraxle.metaopt.auto_ml.html?highlight=hyperparamsjsonrepository#neuraxle.metaopt.auto_ml.HyperparamsJSONRepository)​ is also available if you want to use json files to persist trials.\n",
    "\n",
    "Subscribe to the hyperparams if you want to plot results as they come, or on completion (experimental)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "from neuraxle.plotting import TrialMetricsPlottingObserver\n",
    "\n",
    "hyperparams_repository.subscribe(TrialMetricsPlottingObserver(\n",
    "    plotting_folder_name='metric_results', \n",
    "    save_plots=False, \n",
    "    plot_trial_on_next=False,\n",
    "    plot_all_trials_on_complete=True,\n",
    "    plot_individual_trials_on_complete=False\n",
    "))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 6. Select an hyperparams optimizer \n",
    "\n",
    "Let's pick the infamous Tree Parzen Estimator algorithm:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "from neuraxle.metaopt.tpe import TreeParzenEstimatorHyperparameterSelectionStrategy\n",
    "\n",
    "hyperparams_optimizer = TreeParzenEstimatorHyperparameterSelectionStrategy(\n",
    "    number_of_initial_random_step=10,\n",
    "    quantile_threshold=0.3,\n",
    "    number_good_trials_max_cap=25,\n",
    "    number_possible_hyperparams_candidates=100,\n",
    "    prior_weight=0.,\n",
    "    use_linear_forgetting_weights=False,\n",
    "    number_recent_trial_at_full_weights=25\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note: as of now, [TreeParzenEstimatorHyperparameterSelectionStrategy](https://www.neuraxle.org/stable/api/neuraxle.metaopt.tpe.html#neuraxle.metaopt.tpe.TreeParzenEstimatorHyperparameterSelectionStrategy) is the first usable Apache 2 public TPE implementation ! Thanks to Éric Hamel for implementing this amazing algorithm. \n",
    "\n",
    "Also note that if you don't define the hyperparams_optimizer, [RandomSearchHyperparameterSelectionStrategy](https://www.neuraxle.org/stable/api/neuraxle.metaopt.auto_ml.html?highlight=randomsearchhyperparam#neuraxle.metaopt.auto_ml.RandomSearchHyperparameterSelectionStrategy) will be used by default."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 7. Create, and launch AutoML loop\n",
    "\n",
    "Create the AutoML step that will execute the training loop:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "from neuraxle.metaopt.auto_ml import AutoML\n",
    "import os\n",
    "\n",
    "tmpdir = 'cache'\n",
    "if not os.path.exists(tmpdir):\n",
    "    os.makedirs(tmpdir)\n",
    "    \n",
    "n_trials = 10\n",
    "n_epochs = 10\n",
    "    \n",
    "auto_ml = AutoML(\n",
    "    pipeline=p,\n",
    "    validation_splitter=validation_splitter,\n",
    "    refit_trial=True,\n",
    "    n_trials=n_trials,\n",
    "    epochs=n_epochs,\n",
    "    cache_folder_when_no_handle=str(tmpdir),\n",
    "    scoring_callback=scoring_callback,\n",
    "    callbacks=callbacks,\n",
    "    hyperparams_repository=hyperparams_repository\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Run 10 trials "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "new trial:\n",
      "{\n",
      "    \"ChooseOneStepOf\": {\n",
      "        \"choice\": \"DecisionTreeClassifier\"\n",
      "    }\n",
      "}\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cdae50>\n",
      "\n",
      "trial 1/10\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cdae50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cdae50>\n",
      "fitting trial 1/10 split 1/1\n",
      "hyperparams: {\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__ccp_alpha\": 0.0,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__class_weight\": null,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__criterion\": \"gini\",\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__max_depth\": null,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__max_features\": null,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__max_leaf_nodes\": null,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__min_impurity_decrease\": 0.0,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__min_impurity_split\": null,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__min_samples_leaf\": 1,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__min_samples_split\": 2,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__min_weight_fraction_leaf\": 0.0,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__presort\": \"deprecated\",\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__random_state\": null,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__splitter\": \"best\",\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__enabled\": true,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__C\": 1.0,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__class_weight\": null,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__dual\": false,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__fit_intercept\": true,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__intercept_scaling\": 1,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__l1_ratio\": null,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__max_iter\": 100,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__multi_class\": \"auto\",\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__n_jobs\": null,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__penalty\": \"l2\",\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__random_state\": null,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__solver\": \"lbfgs\",\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__tol\": 0.0001,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__verbose\": 0,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__warm_start\": false,\n",
      "    \"ChooseOneStepOf__LogisticRegression__enabled\": false,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__alpha\": 1.0,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__class_weight\": null,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__copy_X\": true,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__fit_intercept\": true,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__max_iter\": null,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__normalize\": false,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__random_state\": null,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__solver\": \"auto\",\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__tol\": 0.001,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__enabled\": false,\n",
      "    \"ChooseOneStepOf__choice\": \"DecisionTreeClassifier\"\n",
      "}\n",
      "\n",
      "\n",
      "epoch 1/10\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cdae50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cdae50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cdae50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cdae50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cdae50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cdae50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cdae50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cdae50>\n",
      "\n",
      "epoch 2/10\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cdae50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cdae50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cdae50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cdae50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cdae50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cdae50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cdae50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cdae50>\n",
      "\n",
      "epoch 3/10\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cdae50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cdae50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cdae50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cdae50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cdae50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cdae50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cdae50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cdae50>\n",
      "\n",
      "epoch 4/10\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cdae50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cdae50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cdae50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cdae50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cdae50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cdae50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cdae50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cdae50>\n",
      "\n",
      "epoch 5/10\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cdae50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cdae50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cdae50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cdae50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cdae50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cdae50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cdae50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cdae50>\n",
      "\n",
      "epoch 6/10\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cdae50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cdae50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cdae50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cdae50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cdae50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cdae50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cdae50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cdae50>\n",
      "\n",
      "epoch 7/10\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cdae50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cdae50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cdae50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cdae50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cdae50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cdae50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cdae50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cdae50>\n",
      "\n",
      "epoch 8/10\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cdae50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cdae50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cdae50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cdae50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cdae50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cdae50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cdae50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cdae50>\n",
      "\n",
      "epoch 9/10\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cdae50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cdae50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cdae50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cdae50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cdae50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cdae50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cdae50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cdae50>\n",
      "\n",
      "epoch 10/10\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cdae50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cdae50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cdae50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cdae50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cdae50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cdae50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cdae50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cdae50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cdae50>\n",
      "success trial 1/10 split 1/1\n",
      "hyperparams: {\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__ccp_alpha\": 0.0,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__class_weight\": null,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__criterion\": \"gini\",\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__max_depth\": null,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__max_features\": null,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__max_leaf_nodes\": null,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__min_impurity_decrease\": 0.0,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__min_impurity_split\": null,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__min_samples_leaf\": 1,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__min_samples_split\": 2,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__min_weight_fraction_leaf\": 0.0,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__presort\": \"deprecated\",\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__random_state\": null,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__splitter\": \"best\",\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__enabled\": true,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__C\": 1.0,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__class_weight\": null,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__dual\": false,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__fit_intercept\": true,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__intercept_scaling\": 1,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__l1_ratio\": null,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__max_iter\": 100,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__multi_class\": \"auto\",\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__n_jobs\": null,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__penalty\": \"l2\",\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__random_state\": null,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__solver\": \"lbfgs\",\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__tol\": 0.0001,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__verbose\": 0,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__warm_start\": false,\n",
      "    \"ChooseOneStepOf__LogisticRegression__enabled\": false,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__alpha\": 1.0,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__class_weight\": null,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__copy_X\": true,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__fit_intercept\": true,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__max_iter\": null,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__normalize\": false,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__random_state\": null,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__solver\": \"auto\",\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__tol\": 0.001,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__enabled\": false,\n",
      "    \"ChooseOneStepOf__choice\": \"DecisionTreeClassifier\"\n",
      "}\n",
      " score: 0.994375\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cdae50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cdae50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cdae50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cdae50>\n",
      "new trial:\n",
      "{\n",
      "    \"ChooseOneStepOf\": {\n",
      "        \"choice\": \"LogisticRegression\"\n",
      "    }\n",
      "}\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a90>\n",
      "\n",
      "trial 2/10\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a90>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a90>\n",
      "fitting trial 2/10 split 1/1\n",
      "hyperparams: {\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__ccp_alpha\": 0.0,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__class_weight\": null,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__criterion\": \"gini\",\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__max_depth\": null,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__max_features\": null,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__max_leaf_nodes\": null,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__min_impurity_decrease\": 0.0,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__min_impurity_split\": null,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__min_samples_leaf\": 1,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__min_samples_split\": 2,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__min_weight_fraction_leaf\": 0.0,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__presort\": \"deprecated\",\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__random_state\": null,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__splitter\": \"best\",\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__enabled\": true,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__C\": 1.0,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__class_weight\": null,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__dual\": false,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__fit_intercept\": true,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__intercept_scaling\": 1,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__l1_ratio\": null,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__max_iter\": 100,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__multi_class\": \"auto\",\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__n_jobs\": null,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__penalty\": \"l2\",\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__random_state\": null,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__solver\": \"lbfgs\",\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__tol\": 0.0001,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__verbose\": 0,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__warm_start\": false,\n",
      "    \"ChooseOneStepOf__LogisticRegression__enabled\": false,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__alpha\": 1.0,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__class_weight\": null,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__copy_X\": true,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__fit_intercept\": true,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__max_iter\": null,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__normalize\": false,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__random_state\": null,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__solver\": \"auto\",\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__tol\": 0.001,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__enabled\": false,\n",
      "    \"ChooseOneStepOf__choice\": \"LogisticRegression\"\n",
      "}\n",
      "\n",
      "\n",
      "epoch 1/10\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a90>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a90>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a90>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a90>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a90>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a90>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a90>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a90>\n",
      "\n",
      "epoch 2/10\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a90>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a90>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a90>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a90>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a90>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a90>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a90>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a90>\n",
      "\n",
      "epoch 3/10\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a90>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a90>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a90>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a90>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a90>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a90>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a90>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a90>\n",
      "\n",
      "epoch 4/10\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a90>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a90>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a90>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a90>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a90>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a90>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a90>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a90>\n",
      "\n",
      "epoch 5/10\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a90>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a90>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a90>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a90>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a90>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a90>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a90>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a90>\n",
      "\n",
      "epoch 6/10\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a90>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a90>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a90>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a90>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a90>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a90>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a90>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a90>\n",
      "\n",
      "epoch 7/10\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a90>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a90>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a90>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a90>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a90>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a90>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a90>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a90>\n",
      "\n",
      "epoch 8/10\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a90>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a90>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a90>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a90>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a90>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a90>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a90>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a90>\n",
      "\n",
      "epoch 9/10\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a90>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a90>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a90>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a90>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a90>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a90>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a90>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a90>\n",
      "\n",
      "epoch 10/10\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a90>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a90>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a90>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a90>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a90>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a90>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a90>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a90>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a90>\n",
      "success trial 2/10 split 1/1\n",
      "hyperparams: {\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__ccp_alpha\": 0.0,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__class_weight\": null,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__criterion\": \"gini\",\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__max_depth\": null,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__max_features\": null,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__max_leaf_nodes\": null,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__min_impurity_decrease\": 0.0,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__min_impurity_split\": null,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__min_samples_leaf\": 1,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__min_samples_split\": 2,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__min_weight_fraction_leaf\": 0.0,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__presort\": \"deprecated\",\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__random_state\": null,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__splitter\": \"best\",\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__enabled\": true,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__C\": 1.0,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__class_weight\": null,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__dual\": false,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__fit_intercept\": true,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__intercept_scaling\": 1,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__l1_ratio\": null,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__max_iter\": 100,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__multi_class\": \"auto\",\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__n_jobs\": null,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__penalty\": \"l2\",\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__random_state\": null,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__solver\": \"lbfgs\",\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__tol\": 0.0001,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__verbose\": 0,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__warm_start\": false,\n",
      "    \"ChooseOneStepOf__LogisticRegression__enabled\": false,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__alpha\": 1.0,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__class_weight\": null,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__copy_X\": true,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__fit_intercept\": true,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__max_iter\": null,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__normalize\": false,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__random_state\": null,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__solver\": \"auto\",\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__tol\": 0.001,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__enabled\": false,\n",
      "    \"ChooseOneStepOf__choice\": \"LogisticRegression\"\n",
      "}\n",
      " score: 0.99375\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a90>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a90>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a90>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a90>\n",
      "new trial:\n",
      "{\n",
      "    \"ChooseOneStepOf\": {\n",
      "        \"choice\": \"LogisticRegression\"\n",
      "    }\n",
      "}\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccd50>\n",
      "\n",
      "trial 3/10\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccd50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccd50>\n",
      "fitting trial 3/10 split 1/1\n",
      "hyperparams: {\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__ccp_alpha\": 0.0,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__class_weight\": null,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__criterion\": \"gini\",\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__max_depth\": null,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__max_features\": null,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__max_leaf_nodes\": null,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__min_impurity_decrease\": 0.0,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__min_impurity_split\": null,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__min_samples_leaf\": 1,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__min_samples_split\": 2,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__min_weight_fraction_leaf\": 0.0,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__presort\": \"deprecated\",\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__random_state\": null,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__splitter\": \"best\",\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__enabled\": true,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__C\": 1.0,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__class_weight\": null,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__dual\": false,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__fit_intercept\": true,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__intercept_scaling\": 1,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__l1_ratio\": null,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__max_iter\": 100,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__multi_class\": \"auto\",\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__n_jobs\": null,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__penalty\": \"l2\",\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__random_state\": null,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__solver\": \"lbfgs\",\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__tol\": 0.0001,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__verbose\": 0,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__warm_start\": false,\n",
      "    \"ChooseOneStepOf__LogisticRegression__enabled\": false,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__alpha\": 1.0,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__class_weight\": null,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__copy_X\": true,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__fit_intercept\": true,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__max_iter\": null,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__normalize\": false,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__random_state\": null,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__solver\": \"auto\",\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__tol\": 0.001,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__enabled\": false,\n",
      "    \"ChooseOneStepOf__choice\": \"LogisticRegression\"\n",
      "}\n",
      "\n",
      "\n",
      "epoch 1/10\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccd50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccd50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccd50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccd50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccd50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccd50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccd50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccd50>\n",
      "\n",
      "epoch 2/10\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccd50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccd50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccd50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccd50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccd50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccd50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccd50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccd50>\n",
      "\n",
      "epoch 3/10\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccd50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccd50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccd50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccd50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccd50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccd50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccd50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccd50>\n",
      "\n",
      "epoch 4/10\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccd50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccd50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccd50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccd50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccd50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccd50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccd50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccd50>\n",
      "\n",
      "epoch 5/10\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccd50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccd50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccd50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccd50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccd50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccd50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccd50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccd50>\n",
      "\n",
      "epoch 6/10\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccd50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccd50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccd50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccd50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccd50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccd50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccd50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccd50>\n",
      "\n",
      "epoch 7/10\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccd50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccd50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccd50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccd50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccd50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccd50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccd50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccd50>\n",
      "\n",
      "epoch 8/10\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccd50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccd50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccd50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccd50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccd50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccd50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccd50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccd50>\n",
      "\n",
      "epoch 9/10\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccd50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccd50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccd50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccd50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccd50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccd50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccd50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccd50>\n",
      "\n",
      "epoch 10/10\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccd50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccd50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccd50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccd50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccd50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccd50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccd50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccd50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccd50>\n",
      "success trial 3/10 split 1/1\n",
      "hyperparams: {\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__ccp_alpha\": 0.0,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__class_weight\": null,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__criterion\": \"gini\",\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__max_depth\": null,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__max_features\": null,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__max_leaf_nodes\": null,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__min_impurity_decrease\": 0.0,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__min_impurity_split\": null,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__min_samples_leaf\": 1,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__min_samples_split\": 2,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__min_weight_fraction_leaf\": 0.0,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__presort\": \"deprecated\",\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__random_state\": null,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__splitter\": \"best\",\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__enabled\": true,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__C\": 1.0,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__class_weight\": null,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__dual\": false,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__fit_intercept\": true,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__intercept_scaling\": 1,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__l1_ratio\": null,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__max_iter\": 100,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__multi_class\": \"auto\",\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__n_jobs\": null,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__penalty\": \"l2\",\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__random_state\": null,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__solver\": \"lbfgs\",\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__tol\": 0.0001,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__verbose\": 0,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__warm_start\": false,\n",
      "    \"ChooseOneStepOf__LogisticRegression__enabled\": false,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__alpha\": 1.0,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__class_weight\": null,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__copy_X\": true,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__fit_intercept\": true,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__max_iter\": null,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__normalize\": false,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__random_state\": null,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__solver\": \"auto\",\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__tol\": 0.001,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__enabled\": false,\n",
      "    \"ChooseOneStepOf__choice\": \"LogisticRegression\"\n",
      "}\n",
      " score: 0.99375\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccd50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccd50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccd50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccd50>\n",
      "new trial:\n",
      "{\n",
      "    \"ChooseOneStepOf\": {\n",
      "        \"choice\": \"DecisionTreeClassifier\"\n",
      "    }\n",
      "}\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd19d0>\n",
      "\n",
      "trial 4/10\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd19d0>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd19d0>\n",
      "fitting trial 4/10 split 1/1\n",
      "hyperparams: {\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__ccp_alpha\": 0.0,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__class_weight\": null,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__criterion\": \"gini\",\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__max_depth\": null,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__max_features\": null,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__max_leaf_nodes\": null,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__min_impurity_decrease\": 0.0,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__min_impurity_split\": null,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__min_samples_leaf\": 1,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__min_samples_split\": 2,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__min_weight_fraction_leaf\": 0.0,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__presort\": \"deprecated\",\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__random_state\": null,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__splitter\": \"best\",\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__enabled\": true,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__C\": 1.0,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__class_weight\": null,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__dual\": false,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__fit_intercept\": true,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__intercept_scaling\": 1,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__l1_ratio\": null,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__max_iter\": 100,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__multi_class\": \"auto\",\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__n_jobs\": null,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__penalty\": \"l2\",\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__random_state\": null,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__solver\": \"lbfgs\",\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__tol\": 0.0001,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__verbose\": 0,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__warm_start\": false,\n",
      "    \"ChooseOneStepOf__LogisticRegression__enabled\": false,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__alpha\": 1.0,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__class_weight\": null,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__copy_X\": true,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__fit_intercept\": true,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__max_iter\": null,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__normalize\": false,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__random_state\": null,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__solver\": \"auto\",\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__tol\": 0.001,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__enabled\": false,\n",
      "    \"ChooseOneStepOf__choice\": \"DecisionTreeClassifier\"\n",
      "}\n",
      "\n",
      "\n",
      "epoch 1/10\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd19d0>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd19d0>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd19d0>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd19d0>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd19d0>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd19d0>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd19d0>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd19d0>\n",
      "\n",
      "epoch 2/10\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd19d0>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd19d0>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd19d0>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd19d0>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd19d0>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd19d0>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd19d0>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd19d0>\n",
      "\n",
      "epoch 3/10\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd19d0>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd19d0>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd19d0>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd19d0>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd19d0>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd19d0>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd19d0>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd19d0>\n",
      "\n",
      "epoch 4/10\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd19d0>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd19d0>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd19d0>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd19d0>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd19d0>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd19d0>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd19d0>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd19d0>\n",
      "\n",
      "epoch 5/10\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd19d0>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd19d0>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd19d0>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd19d0>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd19d0>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd19d0>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd19d0>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd19d0>\n",
      "\n",
      "epoch 6/10\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd19d0>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd19d0>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd19d0>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd19d0>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd19d0>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd19d0>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd19d0>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd19d0>\n",
      "\n",
      "epoch 7/10\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd19d0>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd19d0>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd19d0>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd19d0>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd19d0>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd19d0>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd19d0>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd19d0>\n",
      "\n",
      "epoch 8/10\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd19d0>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd19d0>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd19d0>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd19d0>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd19d0>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd19d0>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd19d0>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd19d0>\n",
      "\n",
      "epoch 9/10\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd19d0>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd19d0>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd19d0>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd19d0>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd19d0>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd19d0>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd19d0>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd19d0>\n",
      "\n",
      "epoch 10/10\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd19d0>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd19d0>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd19d0>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd19d0>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd19d0>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd19d0>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd19d0>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd19d0>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd19d0>\n",
      "success trial 4/10 split 1/1\n",
      "hyperparams: {\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__ccp_alpha\": 0.0,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__class_weight\": null,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__criterion\": \"gini\",\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__max_depth\": null,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__max_features\": null,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__max_leaf_nodes\": null,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__min_impurity_decrease\": 0.0,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__min_impurity_split\": null,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__min_samples_leaf\": 1,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__min_samples_split\": 2,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__min_weight_fraction_leaf\": 0.0,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__presort\": \"deprecated\",\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__random_state\": null,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__splitter\": \"best\",\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__enabled\": true,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__C\": 1.0,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__class_weight\": null,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__dual\": false,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__fit_intercept\": true,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__intercept_scaling\": 1,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__l1_ratio\": null,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__max_iter\": 100,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__multi_class\": \"auto\",\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__n_jobs\": null,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__penalty\": \"l2\",\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__random_state\": null,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__solver\": \"lbfgs\",\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__tol\": 0.0001,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__verbose\": 0,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__warm_start\": false,\n",
      "    \"ChooseOneStepOf__LogisticRegression__enabled\": false,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__alpha\": 1.0,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__class_weight\": null,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__copy_X\": true,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__fit_intercept\": true,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__max_iter\": null,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__normalize\": false,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__random_state\": null,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__solver\": \"auto\",\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__tol\": 0.001,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__enabled\": false,\n",
      "    \"ChooseOneStepOf__choice\": \"DecisionTreeClassifier\"\n",
      "}\n",
      " score: 0.99375\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd19d0>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd19d0>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd19d0>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd19d0>\n",
      "new trial:\n",
      "{\n",
      "    \"ChooseOneStepOf\": {\n",
      "        \"choice\": \"DecisionTreeClassifier\"\n",
      "    }\n",
      "}\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cda750>\n",
      "\n",
      "trial 5/10\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cda750>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cda750>\n",
      "fitting trial 5/10 split 1/1\n",
      "hyperparams: {\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__ccp_alpha\": 0.0,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__class_weight\": null,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__criterion\": \"gini\",\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__max_depth\": null,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__max_features\": null,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__max_leaf_nodes\": null,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__min_impurity_decrease\": 0.0,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__min_impurity_split\": null,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__min_samples_leaf\": 1,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__min_samples_split\": 2,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__min_weight_fraction_leaf\": 0.0,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__presort\": \"deprecated\",\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__random_state\": null,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__splitter\": \"best\",\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__enabled\": true,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__C\": 1.0,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__class_weight\": null,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__dual\": false,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__fit_intercept\": true,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__intercept_scaling\": 1,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__l1_ratio\": null,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__max_iter\": 100,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__multi_class\": \"auto\",\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__n_jobs\": null,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__penalty\": \"l2\",\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__random_state\": null,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__solver\": \"lbfgs\",\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__tol\": 0.0001,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__verbose\": 0,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__warm_start\": false,\n",
      "    \"ChooseOneStepOf__LogisticRegression__enabled\": false,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__alpha\": 1.0,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__class_weight\": null,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__copy_X\": true,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__fit_intercept\": true,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__max_iter\": null,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__normalize\": false,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__random_state\": null,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__solver\": \"auto\",\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__tol\": 0.001,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__enabled\": false,\n",
      "    \"ChooseOneStepOf__choice\": \"DecisionTreeClassifier\"\n",
      "}\n",
      "\n",
      "\n",
      "epoch 1/10\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cda750>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cda750>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cda750>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cda750>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cda750>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cda750>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cda750>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cda750>\n",
      "\n",
      "epoch 2/10\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cda750>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cda750>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cda750>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cda750>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cda750>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cda750>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cda750>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cda750>\n",
      "\n",
      "epoch 3/10\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cda750>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cda750>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cda750>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cda750>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cda750>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cda750>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cda750>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cda750>\n",
      "\n",
      "epoch 4/10\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cda750>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cda750>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cda750>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cda750>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cda750>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cda750>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cda750>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cda750>\n",
      "\n",
      "epoch 5/10\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cda750>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cda750>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cda750>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cda750>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cda750>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cda750>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cda750>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cda750>\n",
      "\n",
      "epoch 6/10\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cda750>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cda750>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cda750>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cda750>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cda750>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cda750>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cda750>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cda750>\n",
      "\n",
      "epoch 7/10\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cda750>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cda750>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cda750>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cda750>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cda750>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cda750>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cda750>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cda750>\n",
      "\n",
      "epoch 8/10\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cda750>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cda750>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cda750>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cda750>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cda750>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cda750>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cda750>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cda750>\n",
      "\n",
      "epoch 9/10\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cda750>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cda750>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cda750>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cda750>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cda750>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cda750>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cda750>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cda750>\n",
      "\n",
      "epoch 10/10\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cda750>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cda750>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cda750>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cda750>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cda750>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cda750>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cda750>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cda750>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cda750>\n",
      "success trial 5/10 split 1/1\n",
      "hyperparams: {\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__ccp_alpha\": 0.0,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__class_weight\": null,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__criterion\": \"gini\",\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__max_depth\": null,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__max_features\": null,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__max_leaf_nodes\": null,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__min_impurity_decrease\": 0.0,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__min_impurity_split\": null,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__min_samples_leaf\": 1,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__min_samples_split\": 2,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__min_weight_fraction_leaf\": 0.0,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__presort\": \"deprecated\",\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__random_state\": null,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__splitter\": \"best\",\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__enabled\": true,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__C\": 1.0,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__class_weight\": null,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__dual\": false,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__fit_intercept\": true,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__intercept_scaling\": 1,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__l1_ratio\": null,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__max_iter\": 100,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__multi_class\": \"auto\",\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__n_jobs\": null,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__penalty\": \"l2\",\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__random_state\": null,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__solver\": \"lbfgs\",\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__tol\": 0.0001,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__verbose\": 0,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__warm_start\": false,\n",
      "    \"ChooseOneStepOf__LogisticRegression__enabled\": false,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__alpha\": 1.0,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__class_weight\": null,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__copy_X\": true,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__fit_intercept\": true,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__max_iter\": null,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__normalize\": false,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__random_state\": null,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__solver\": \"auto\",\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__tol\": 0.001,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__enabled\": false,\n",
      "    \"ChooseOneStepOf__choice\": \"DecisionTreeClassifier\"\n",
      "}\n",
      " score: 0.995\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cda750>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cda750>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cda750>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cda750>\n",
      "new trial:\n",
      "{\n",
      "    \"ChooseOneStepOf\": {\n",
      "        \"choice\": \"DecisionTreeClassifier\"\n",
      "    }\n",
      "}\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1e9d250>\n",
      "\n",
      "trial 6/10\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1e9d250>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1e9d250>\n",
      "fitting trial 6/10 split 1/1\n",
      "hyperparams: {\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__ccp_alpha\": 0.0,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__class_weight\": null,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__criterion\": \"gini\",\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__max_depth\": null,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__max_features\": null,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__max_leaf_nodes\": null,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__min_impurity_decrease\": 0.0,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__min_impurity_split\": null,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__min_samples_leaf\": 1,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__min_samples_split\": 2,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__min_weight_fraction_leaf\": 0.0,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__presort\": \"deprecated\",\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__random_state\": null,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__splitter\": \"best\",\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__enabled\": true,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__C\": 1.0,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__class_weight\": null,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__dual\": false,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__fit_intercept\": true,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__intercept_scaling\": 1,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__l1_ratio\": null,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__max_iter\": 100,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__multi_class\": \"auto\",\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__n_jobs\": null,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__penalty\": \"l2\",\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__random_state\": null,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__solver\": \"lbfgs\",\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__tol\": 0.0001,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__verbose\": 0,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__warm_start\": false,\n",
      "    \"ChooseOneStepOf__LogisticRegression__enabled\": false,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__alpha\": 1.0,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__class_weight\": null,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__copy_X\": true,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__fit_intercept\": true,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__max_iter\": null,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__normalize\": false,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__random_state\": null,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__solver\": \"auto\",\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__tol\": 0.001,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__enabled\": false,\n",
      "    \"ChooseOneStepOf__choice\": \"DecisionTreeClassifier\"\n",
      "}\n",
      "\n",
      "\n",
      "epoch 1/10\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1e9d250>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1e9d250>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1e9d250>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1e9d250>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1e9d250>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1e9d250>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1e9d250>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1e9d250>\n",
      "\n",
      "epoch 2/10\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1e9d250>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1e9d250>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1e9d250>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1e9d250>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1e9d250>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1e9d250>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1e9d250>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1e9d250>\n",
      "\n",
      "epoch 3/10\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1e9d250>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1e9d250>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1e9d250>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1e9d250>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1e9d250>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1e9d250>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1e9d250>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1e9d250>\n",
      "\n",
      "epoch 4/10\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1e9d250>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1e9d250>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1e9d250>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1e9d250>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1e9d250>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1e9d250>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1e9d250>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1e9d250>\n",
      "\n",
      "epoch 5/10\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1e9d250>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1e9d250>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1e9d250>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1e9d250>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1e9d250>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1e9d250>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1e9d250>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1e9d250>\n",
      "\n",
      "epoch 6/10\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1e9d250>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1e9d250>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1e9d250>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1e9d250>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1e9d250>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1e9d250>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1e9d250>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1e9d250>\n",
      "\n",
      "epoch 7/10\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1e9d250>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1e9d250>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1e9d250>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1e9d250>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1e9d250>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1e9d250>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1e9d250>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1e9d250>\n",
      "\n",
      "epoch 8/10\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1e9d250>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1e9d250>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1e9d250>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1e9d250>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1e9d250>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1e9d250>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1e9d250>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1e9d250>\n",
      "\n",
      "epoch 9/10\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1e9d250>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1e9d250>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1e9d250>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1e9d250>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1e9d250>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1e9d250>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1e9d250>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1e9d250>\n",
      "\n",
      "epoch 10/10\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1e9d250>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1e9d250>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1e9d250>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1e9d250>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1e9d250>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1e9d250>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1e9d250>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1e9d250>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1e9d250>\n",
      "success trial 6/10 split 1/1\n",
      "hyperparams: {\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__ccp_alpha\": 0.0,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__class_weight\": null,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__criterion\": \"gini\",\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__max_depth\": null,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__max_features\": null,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__max_leaf_nodes\": null,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__min_impurity_decrease\": 0.0,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__min_impurity_split\": null,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__min_samples_leaf\": 1,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__min_samples_split\": 2,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__min_weight_fraction_leaf\": 0.0,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__presort\": \"deprecated\",\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__random_state\": null,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__splitter\": \"best\",\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__enabled\": true,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__C\": 1.0,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__class_weight\": null,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__dual\": false,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__fit_intercept\": true,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__intercept_scaling\": 1,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__l1_ratio\": null,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__max_iter\": 100,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__multi_class\": \"auto\",\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__n_jobs\": null,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__penalty\": \"l2\",\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__random_state\": null,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__solver\": \"lbfgs\",\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__tol\": 0.0001,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__verbose\": 0,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__warm_start\": false,\n",
      "    \"ChooseOneStepOf__LogisticRegression__enabled\": false,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__alpha\": 1.0,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__class_weight\": null,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__copy_X\": true,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__fit_intercept\": true,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__max_iter\": null,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__normalize\": false,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__random_state\": null,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__solver\": \"auto\",\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__tol\": 0.001,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__enabled\": false,\n",
      "    \"ChooseOneStepOf__choice\": \"DecisionTreeClassifier\"\n",
      "}\n",
      " score: 0.995\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1e9d250>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1e9d250>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1e9d250>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1e9d250>\n",
      "new trial:\n",
      "{\n",
      "    \"ChooseOneStepOf\": {\n",
      "        \"choice\": \"LogisticRegression\"\n",
      "    }\n",
      "}\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d23ae410>\n",
      "\n",
      "trial 7/10\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d23ae410>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d23ae410>\n",
      "fitting trial 7/10 split 1/1\n",
      "hyperparams: {\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__ccp_alpha\": 0.0,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__class_weight\": null,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__criterion\": \"gini\",\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__max_depth\": null,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__max_features\": null,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__max_leaf_nodes\": null,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__min_impurity_decrease\": 0.0,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__min_impurity_split\": null,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__min_samples_leaf\": 1,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__min_samples_split\": 2,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__min_weight_fraction_leaf\": 0.0,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__presort\": \"deprecated\",\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__random_state\": null,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__splitter\": \"best\",\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__enabled\": true,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__C\": 1.0,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__class_weight\": null,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__dual\": false,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__fit_intercept\": true,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__intercept_scaling\": 1,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__l1_ratio\": null,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__max_iter\": 100,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__multi_class\": \"auto\",\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__n_jobs\": null,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__penalty\": \"l2\",\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__random_state\": null,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__solver\": \"lbfgs\",\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__tol\": 0.0001,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__verbose\": 0,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__warm_start\": false,\n",
      "    \"ChooseOneStepOf__LogisticRegression__enabled\": false,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__alpha\": 1.0,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__class_weight\": null,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__copy_X\": true,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__fit_intercept\": true,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__max_iter\": null,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__normalize\": false,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__random_state\": null,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__solver\": \"auto\",\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__tol\": 0.001,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__enabled\": false,\n",
      "    \"ChooseOneStepOf__choice\": \"LogisticRegression\"\n",
      "}\n",
      "\n",
      "\n",
      "epoch 1/10\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d23ae410>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d23ae410>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d23ae410>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d23ae410>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d23ae410>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d23ae410>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d23ae410>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d23ae410>\n",
      "\n",
      "epoch 2/10\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d23ae410>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d23ae410>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d23ae410>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d23ae410>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d23ae410>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d23ae410>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d23ae410>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d23ae410>\n",
      "\n",
      "epoch 3/10\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d23ae410>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d23ae410>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d23ae410>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d23ae410>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d23ae410>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d23ae410>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d23ae410>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d23ae410>\n",
      "\n",
      "epoch 4/10\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d23ae410>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d23ae410>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d23ae410>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d23ae410>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d23ae410>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d23ae410>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d23ae410>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d23ae410>\n",
      "\n",
      "epoch 5/10\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d23ae410>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d23ae410>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d23ae410>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d23ae410>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d23ae410>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d23ae410>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d23ae410>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d23ae410>\n",
      "\n",
      "epoch 6/10\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d23ae410>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d23ae410>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d23ae410>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d23ae410>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d23ae410>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d23ae410>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d23ae410>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d23ae410>\n",
      "\n",
      "epoch 7/10\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d23ae410>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d23ae410>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d23ae410>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d23ae410>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d23ae410>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d23ae410>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d23ae410>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d23ae410>\n",
      "\n",
      "epoch 8/10\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d23ae410>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d23ae410>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d23ae410>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d23ae410>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d23ae410>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d23ae410>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d23ae410>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d23ae410>\n",
      "\n",
      "epoch 9/10\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d23ae410>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d23ae410>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d23ae410>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d23ae410>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d23ae410>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d23ae410>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d23ae410>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d23ae410>\n",
      "\n",
      "epoch 10/10\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d23ae410>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d23ae410>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d23ae410>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d23ae410>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d23ae410>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d23ae410>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d23ae410>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d23ae410>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d23ae410>\n",
      "success trial 7/10 split 1/1\n",
      "hyperparams: {\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__ccp_alpha\": 0.0,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__class_weight\": null,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__criterion\": \"gini\",\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__max_depth\": null,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__max_features\": null,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__max_leaf_nodes\": null,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__min_impurity_decrease\": 0.0,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__min_impurity_split\": null,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__min_samples_leaf\": 1,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__min_samples_split\": 2,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__min_weight_fraction_leaf\": 0.0,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__presort\": \"deprecated\",\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__random_state\": null,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__splitter\": \"best\",\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__enabled\": true,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__C\": 1.0,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__class_weight\": null,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__dual\": false,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__fit_intercept\": true,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__intercept_scaling\": 1,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__l1_ratio\": null,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__max_iter\": 100,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__multi_class\": \"auto\",\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__n_jobs\": null,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__penalty\": \"l2\",\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__random_state\": null,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__solver\": \"lbfgs\",\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__tol\": 0.0001,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__verbose\": 0,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__warm_start\": false,\n",
      "    \"ChooseOneStepOf__LogisticRegression__enabled\": false,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__alpha\": 1.0,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__class_weight\": null,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__copy_X\": true,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__fit_intercept\": true,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__max_iter\": null,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__normalize\": false,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__random_state\": null,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__solver\": \"auto\",\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__tol\": 0.001,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__enabled\": false,\n",
      "    \"ChooseOneStepOf__choice\": \"LogisticRegression\"\n",
      "}\n",
      " score: 0.99375\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d23ae410>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d23ae410>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d23ae410>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d23ae410>\n",
      "new trial:\n",
      "{\n",
      "    \"ChooseOneStepOf\": {\n",
      "        \"choice\": \"DecisionTreeClassifier\"\n",
      "    }\n",
      "}\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccc50>\n",
      "\n",
      "trial 8/10\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccc50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccc50>\n",
      "fitting trial 8/10 split 1/1\n",
      "hyperparams: {\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__ccp_alpha\": 0.0,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__class_weight\": null,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__criterion\": \"gini\",\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__max_depth\": null,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__max_features\": null,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__max_leaf_nodes\": null,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__min_impurity_decrease\": 0.0,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__min_impurity_split\": null,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__min_samples_leaf\": 1,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__min_samples_split\": 2,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__min_weight_fraction_leaf\": 0.0,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__presort\": \"deprecated\",\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__random_state\": null,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__splitter\": \"best\",\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__enabled\": true,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__C\": 1.0,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__class_weight\": null,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__dual\": false,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__fit_intercept\": true,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__intercept_scaling\": 1,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__l1_ratio\": null,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__max_iter\": 100,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__multi_class\": \"auto\",\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__n_jobs\": null,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__penalty\": \"l2\",\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__random_state\": null,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__solver\": \"lbfgs\",\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__tol\": 0.0001,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__verbose\": 0,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__warm_start\": false,\n",
      "    \"ChooseOneStepOf__LogisticRegression__enabled\": false,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__alpha\": 1.0,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__class_weight\": null,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__copy_X\": true,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__fit_intercept\": true,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__max_iter\": null,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__normalize\": false,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__random_state\": null,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__solver\": \"auto\",\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__tol\": 0.001,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__enabled\": false,\n",
      "    \"ChooseOneStepOf__choice\": \"DecisionTreeClassifier\"\n",
      "}\n",
      "\n",
      "\n",
      "epoch 1/10\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccc50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccc50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccc50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccc50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccc50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccc50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccc50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccc50>\n",
      "\n",
      "epoch 2/10\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccc50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccc50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccc50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccc50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccc50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccc50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccc50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccc50>\n",
      "\n",
      "epoch 3/10\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccc50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccc50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccc50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccc50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccc50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccc50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccc50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccc50>\n",
      "\n",
      "epoch 4/10\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccc50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccc50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccc50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccc50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccc50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccc50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccc50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccc50>\n",
      "\n",
      "epoch 5/10\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccc50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccc50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccc50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccc50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccc50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccc50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccc50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccc50>\n",
      "\n",
      "epoch 6/10\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccc50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccc50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccc50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccc50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccc50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccc50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccc50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccc50>\n",
      "\n",
      "epoch 7/10\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccc50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccc50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccc50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccc50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccc50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccc50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccc50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccc50>\n",
      "\n",
      "epoch 8/10\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccc50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccc50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccc50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccc50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccc50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccc50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccc50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccc50>\n",
      "\n",
      "epoch 9/10\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccc50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccc50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccc50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccc50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccc50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccc50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccc50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccc50>\n",
      "\n",
      "epoch 10/10\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccc50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccc50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccc50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccc50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccc50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccc50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccc50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccc50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccc50>\n",
      "success trial 8/10 split 1/1\n",
      "hyperparams: {\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__ccp_alpha\": 0.0,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__class_weight\": null,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__criterion\": \"gini\",\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__max_depth\": null,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__max_features\": null,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__max_leaf_nodes\": null,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__min_impurity_decrease\": 0.0,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__min_impurity_split\": null,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__min_samples_leaf\": 1,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__min_samples_split\": 2,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__min_weight_fraction_leaf\": 0.0,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__presort\": \"deprecated\",\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__random_state\": null,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__splitter\": \"best\",\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__enabled\": true,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__C\": 1.0,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__class_weight\": null,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__dual\": false,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__fit_intercept\": true,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__intercept_scaling\": 1,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__l1_ratio\": null,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__max_iter\": 100,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__multi_class\": \"auto\",\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__n_jobs\": null,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__penalty\": \"l2\",\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__random_state\": null,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__solver\": \"lbfgs\",\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__tol\": 0.0001,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__verbose\": 0,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__warm_start\": false,\n",
      "    \"ChooseOneStepOf__LogisticRegression__enabled\": false,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__alpha\": 1.0,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__class_weight\": null,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__copy_X\": true,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__fit_intercept\": true,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__max_iter\": null,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__normalize\": false,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__random_state\": null,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__solver\": \"auto\",\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__tol\": 0.001,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__enabled\": false,\n",
      "    \"ChooseOneStepOf__choice\": \"DecisionTreeClassifier\"\n",
      "}\n",
      " score: 0.994375\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccc50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccc50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccc50>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cccc50>\n",
      "new trial:\n",
      "{\n",
      "    \"ChooseOneStepOf\": {\n",
      "        \"choice\": \"DecisionTreeClassifier\"\n",
      "    }\n",
      "}\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a10>\n",
      "\n",
      "trial 9/10\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a10>\n",
      "fitting trial 9/10 split 1/1\n",
      "hyperparams: {\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__ccp_alpha\": 0.0,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__class_weight\": null,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__criterion\": \"gini\",\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__max_depth\": null,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__max_features\": null,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__max_leaf_nodes\": null,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__min_impurity_decrease\": 0.0,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__min_impurity_split\": null,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__min_samples_leaf\": 1,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__min_samples_split\": 2,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__min_weight_fraction_leaf\": 0.0,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__presort\": \"deprecated\",\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__random_state\": null,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__splitter\": \"best\",\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__enabled\": true,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__C\": 1.0,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__class_weight\": null,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__dual\": false,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__fit_intercept\": true,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__intercept_scaling\": 1,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__l1_ratio\": null,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__max_iter\": 100,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__multi_class\": \"auto\",\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__n_jobs\": null,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__penalty\": \"l2\",\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__random_state\": null,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__solver\": \"lbfgs\",\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__tol\": 0.0001,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__verbose\": 0,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__warm_start\": false,\n",
      "    \"ChooseOneStepOf__LogisticRegression__enabled\": false,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__alpha\": 1.0,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__class_weight\": null,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__copy_X\": true,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__fit_intercept\": true,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__max_iter\": null,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__normalize\": false,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__random_state\": null,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__solver\": \"auto\",\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__tol\": 0.001,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__enabled\": false,\n",
      "    \"ChooseOneStepOf__choice\": \"DecisionTreeClassifier\"\n",
      "}\n",
      "\n",
      "\n",
      "epoch 1/10\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a10>\n",
      "\n",
      "epoch 2/10\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a10>\n",
      "\n",
      "epoch 3/10\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a10>\n",
      "\n",
      "epoch 4/10\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a10>\n",
      "\n",
      "epoch 5/10\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a10>\n",
      "\n",
      "epoch 6/10\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a10>\n",
      "\n",
      "epoch 7/10\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a10>\n",
      "\n",
      "epoch 8/10\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a10>\n",
      "\n",
      "epoch 9/10\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a10>\n",
      "\n",
      "epoch 10/10\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a10>\n",
      "success trial 9/10 split 1/1\n",
      "hyperparams: {\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__ccp_alpha\": 0.0,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__class_weight\": null,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__criterion\": \"gini\",\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__max_depth\": null,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__max_features\": null,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__max_leaf_nodes\": null,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__min_impurity_decrease\": 0.0,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__min_impurity_split\": null,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__min_samples_leaf\": 1,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__min_samples_split\": 2,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__min_weight_fraction_leaf\": 0.0,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__presort\": \"deprecated\",\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__random_state\": null,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__splitter\": \"best\",\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__enabled\": true,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__C\": 1.0,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__class_weight\": null,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__dual\": false,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__fit_intercept\": true,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__intercept_scaling\": 1,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__l1_ratio\": null,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__max_iter\": 100,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__multi_class\": \"auto\",\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__n_jobs\": null,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__penalty\": \"l2\",\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__random_state\": null,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__solver\": \"lbfgs\",\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__tol\": 0.0001,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__verbose\": 0,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__warm_start\": false,\n",
      "    \"ChooseOneStepOf__LogisticRegression__enabled\": false,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__alpha\": 1.0,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__class_weight\": null,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__copy_X\": true,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__fit_intercept\": true,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__max_iter\": null,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__normalize\": false,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__random_state\": null,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__solver\": \"auto\",\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__tol\": 0.001,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__enabled\": false,\n",
      "    \"ChooseOneStepOf__choice\": \"DecisionTreeClassifier\"\n",
      "}\n",
      " score: 0.995\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd8a10>\n",
      "new trial:\n",
      "{\n",
      "    \"ChooseOneStepOf\": {\n",
      "        \"choice\": \"LogisticRegression\"\n",
      "    }\n",
      "}\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd1a10>\n",
      "\n",
      "trial 10/10\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd1a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd1a10>\n",
      "fitting trial 10/10 split 1/1\n",
      "hyperparams: {\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__ccp_alpha\": 0.0,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__class_weight\": null,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__criterion\": \"gini\",\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__max_depth\": null,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__max_features\": null,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__max_leaf_nodes\": null,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__min_impurity_decrease\": 0.0,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__min_impurity_split\": null,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__min_samples_leaf\": 1,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__min_samples_split\": 2,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__min_weight_fraction_leaf\": 0.0,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__presort\": \"deprecated\",\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__random_state\": null,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__splitter\": \"best\",\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__enabled\": true,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__C\": 1.0,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__class_weight\": null,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__dual\": false,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__fit_intercept\": true,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__intercept_scaling\": 1,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__l1_ratio\": null,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__max_iter\": 100,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__multi_class\": \"auto\",\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__n_jobs\": null,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__penalty\": \"l2\",\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__random_state\": null,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__solver\": \"lbfgs\",\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__tol\": 0.0001,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__verbose\": 0,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__warm_start\": false,\n",
      "    \"ChooseOneStepOf__LogisticRegression__enabled\": false,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__alpha\": 1.0,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__class_weight\": null,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__copy_X\": true,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__fit_intercept\": true,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__max_iter\": null,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__normalize\": false,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__random_state\": null,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__solver\": \"auto\",\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__tol\": 0.001,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__enabled\": false,\n",
      "    \"ChooseOneStepOf__choice\": \"LogisticRegression\"\n",
      "}\n",
      "\n",
      "\n",
      "epoch 1/10\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd1a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd1a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd1a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd1a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd1a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd1a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd1a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd1a10>\n",
      "\n",
      "epoch 2/10\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd1a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd1a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd1a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd1a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd1a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd1a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd1a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd1a10>\n",
      "\n",
      "epoch 3/10\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd1a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd1a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd1a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd1a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd1a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd1a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd1a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd1a10>\n",
      "\n",
      "epoch 4/10\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd1a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd1a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd1a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd1a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd1a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd1a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd1a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd1a10>\n",
      "\n",
      "epoch 5/10\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd1a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd1a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd1a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd1a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd1a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd1a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd1a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd1a10>\n",
      "\n",
      "epoch 6/10\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd1a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd1a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd1a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd1a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd1a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd1a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd1a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd1a10>\n",
      "\n",
      "epoch 7/10\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd1a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd1a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd1a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd1a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd1a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd1a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd1a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd1a10>\n",
      "\n",
      "epoch 8/10\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd1a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd1a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd1a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd1a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd1a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd1a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd1a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd1a10>\n",
      "\n",
      "epoch 9/10\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd1a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd1a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd1a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd1a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd1a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd1a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd1a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd1a10>\n",
      "\n",
      "epoch 10/10\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd1a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd1a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd1a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd1a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd1a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd1a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd1a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd1a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd1a10>\n",
      "success trial 10/10 split 1/1\n",
      "hyperparams: {\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__ccp_alpha\": 0.0,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__class_weight\": null,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__criterion\": \"gini\",\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__max_depth\": null,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__max_features\": null,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__max_leaf_nodes\": null,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__min_impurity_decrease\": 0.0,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__min_impurity_split\": null,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__min_samples_leaf\": 1,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__min_samples_split\": 2,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__min_weight_fraction_leaf\": 0.0,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__presort\": \"deprecated\",\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__random_state\": null,\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__Optional(DecisionTreeClassifier)__splitter\": \"best\",\n",
      "    \"ChooseOneStepOf__DecisionTreeClassifier__enabled\": true,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__C\": 1.0,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__class_weight\": null,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__dual\": false,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__fit_intercept\": true,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__intercept_scaling\": 1,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__l1_ratio\": null,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__max_iter\": 100,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__multi_class\": \"auto\",\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__n_jobs\": null,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__penalty\": \"l2\",\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__random_state\": null,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__solver\": \"lbfgs\",\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__tol\": 0.0001,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__verbose\": 0,\n",
      "    \"ChooseOneStepOf__LogisticRegression__Optional(LogisticRegression)__SKLearnWrapper_LogisticRegression__warm_start\": false,\n",
      "    \"ChooseOneStepOf__LogisticRegression__enabled\": false,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__alpha\": 1.0,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__class_weight\": null,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__copy_X\": true,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__fit_intercept\": true,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__max_iter\": null,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__normalize\": false,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__random_state\": null,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__solver\": \"auto\",\n",
      "    \"ChooseOneStepOf__RidgeClassifier__Optional(RidgeClassifier)__SKLearnWrapper_RidgeClassifier__tol\": 0.001,\n",
      "    \"ChooseOneStepOf__RidgeClassifier__enabled\": false,\n",
      "    \"ChooseOneStepOf__choice\": \"LogisticRegression\"\n",
      "}\n",
      " score: 0.995625\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd1a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd1a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd1a10>\n",
      "<neuraxle.metaopt.trial.Trial object at 0x7f87d1cd1a10>\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYgAAAEWCAYAAAB8LwAVAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjEsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+j8jraAAARRUlEQVR4nO3de5CddX3H8fcHQlQEC5iU0gQIVLREBwVXQBkuYseCbaUytkq9AB0nnQr13gq1LTM4th2lahkZEDUiwkAtokMtChZE6owoy/1WaMQCCVjWctGIisC3f5wncLL8dhPCnjxL9v2a2ZnzXM453z3D8t7neU7OpqqQJGmyzfoeQJI0OxkISVKTgZAkNRkISVKTgZAkNRkISVKTgZBGIMnXkxy5gfd9UZJrk/w0ybtmejZpfcV/ByENJFk9tLgl8Evg0W75z6rq7I00x+eAn1TVe7vlVwN/B+wF3F9VSzbGHJJHEFKnqrZa8wXcCfzB0LrH45Bk3ohH2Rm4aWj5Z8By4C9H/LzSWgyEtA5JDkqyMskHk/wI+HySbZN8LclEkvu724uH7nNZknd0t49K8p0kJ3X7/jDJoVM816XAq4FPJVmd5IVV9f2q+iJw+8b4fqU1DIS0fn4D2I7Bb/fLGPzsfL5b3gn4OfCpae6/D3ArsAD4KPC5JJm8U1UdDPwncGx35HLbTH4T0lNhIKT18xhwQlX9sqp+XlX/V1VfrqqHquqnwEeAA6e5/x1V9ZmqehT4ArADsP1GmFvaYKM+lyptKiaq6hdrFpJsCXwCOATYtlu9dZLNuwhM9qM1N6rqoe7gYasRzis9bR5BSOtn8tv93g+8CNinqp4HHNCtf9JpI+mZyiMIacNszeC6wwNJtgNOGNUTJdkMmA9sMVjMs4HHqurhUT2nBB5BSBvqk8BzgB8DVwDfGOFzHcAgRhfyxAXxi0f4fBLgP5STJE3BIwhJUpOBkCQ1GQhJUpOBkCQ1bTJvc12wYEEtWbKk7zEk6Rnlqquu+nFVLWxt22QCsWTJEsbHx/seQ5KeUZLcMdU2TzFJkpoMhCSpyUBIkpoMhCSpyUBIkpoMhCSpyUBIkpoMhCSpyUBIkpoMhCSpyUBIkpoMhCSpyUBIkpoMhCSpyUBIkpoMhCSpyUBIkpoMhCSpyUBIkpoMhCSpyUBIkpoMhCSpyUBIkpoMhCSpyUBIkppGFogky5Pcm+TGKbYnyclJViS5Pslek7Y/L8nKJJ8a1YySpKmN8gjiDOCQabYfCuzWfS0DTp20/cPA5SOZTJK0TiMLRFVdDtw3zS6HAWfWwBXANkl2AEjycmB74OJRzSdJml6f1yAWAXcNLa8EFiXZDPgn4APreoAky5KMJxmfmJgY0ZiSNDfNxovU7wQurKqV69qxqk6vqrGqGlu4cOFGGE2S5o55PT73KmDHoeXF3bpXAvsneSewFTA/yeqqOq6HGSVpzuozEBcAxyY5F9gHeLCq7gHesmaHJEcBY8ZBkja+kQUiyTnAQcCCJCuBE4AtAKrqNOBC4HXACuAh4OhRzSJJeupGFoiqOmId2ws4Zh37nMHg7bKSpI1sNl6kliTNAgZCktRkICRJTQZCktRkICRJTQZCktRkICRJTQZCktRkICRJTQZCktRkICRJTQZCktRkICRJTQZCktRkICRJTQZCktRkICRJTQZCktRkICRJTQZCktRkICRJTQZCktRkICRJTQZCktRkICRJTQZCktRkICRJTQZCktRkICRJTQZCktQ0skAkWZ7k3iQ3TrE9SU5OsiLJ9Un26ta/LMl3k9zUrX/TqGaUJE1tlEcQZwCHTLP9UGC37msZcGq3/iHg7VX14u7+n0yyzQjnlCQ1zBvVA1fV5UmWTLPLYcCZVVXAFUm2SbJDVd029Bh3J7kXWAg8MKpZJUlP1uc1iEXAXUPLK7t1j0uyNzAf+MFGnEuSxCy+SJ1kB+CLwNFV9dgU+yxLMp5kfGJiYuMOKEmbuD4DsQrYcWh5cbeOJM8D/h34UFVdMdUDVNXpVTVWVWMLFy4c6bCSNNf0GYgLgLd372baF3iwqu5JMh/4CoPrE+f1OJ8kzWkju0id5BzgIGBBkpXACcAWAFV1GnAh8DpgBYN3Lh3d3fWPgQOA5yc5qlt3VFVdO6pZJUlPNsp3MR2xju0FHNNYfxZw1qjmkiStn1l7kVqS1C8DIUlqMhCSpCYDIUlqMhCSpCYDIUlqMhCSpCYDIUlqMhCSpCYDIUlqMhCSpCYDIUlqMhCSpCYDIUlqMhCSpCYDIUlqMhCSpCYDIUlqMhCSpCYDIUlqMhCSpCYDIUlqMhCSpCYDIUlqMhCSpCYDIUlqMhCSpCYDIUlqMhCSpCYDIUlqMhCSpKaRBSLJ8iT3Jrlxiu1JcnKSFUmuT7LX0LYjk/x393XkqGaUJE1tgwKRZKv12O0M4JBpth8K7NZ9LQNO7R57O+AEYB9gb+CEJNtuyJySpA23oUcQN69rh6q6HLhvml0OA86sgSuAbZLsAPwu8M2quq+q7ge+yfShkSSNwLypNiR531SbgPU5gliXRcBdQ8sru3VTrW/NuIzB0Qc77bTT0xrmfWf8Iw9steXTegxJ6sM2qx/i40cdN+OPO2UggL8HPgY80tg2Ky5uV9XpwOkAY2Nj9XQeaxQvriQ9k00XiKuBr1bVVZM3JHnHDDz3KmDHoeXF3bpVwEGT1l82A88nSXoKpjsSWAXckeTdjW1jM/DcFwBv797NtC/wYFXdA1wEvDbJtt3F6dd26yRJG9F0RxBLgfnAnyY5k8G1hzV+ta4HTnIOgyOBBUlWMnhn0hYAVXUacCHwOmAF8BBwdLftviQfBq7sHurEqpruYrckaQSmC8SngUuAXYGrWDsQ1a2fUlUdsY7tBRwzxbblwPLp7i9JGq0pTzFV1clVtTuwvKp2rapdhr6mjYMk6Zlvne9Gqqo/3xiDSJJml1nxdlVJ0uxjICRJTQZCktRkICRJTQZCktRkICRJTQZCktRkICRJTQZCktRkICRJTQZCktRkICRJTQZCktRkICRJTQZCktRkICRJTQZCktRkICRJTQZCktRkICRJTQZCktRkICRJTQZCktRkICRJTQZCktRkICRJTQZCktRkICRJTSMNRJJDktyaZEWS4xrbd05ySZLrk1yWZPHQto8muSnJLUlOTpJRzipJWtvIApFkc+AU4FBgKXBEkqWTdjsJOLOq9gBOBP6hu++rgP2APYCXAK8ADhzVrJKkJxvlEcTewIqqur2qHgbOBQ6btM9S4NLu9reGthfwbGA+8CxgC+B/RzirJGmSUQZiEXDX0PLKbt2w64DDu9tvALZO8vyq+i6DYNzTfV1UVbeMcFZJ0iR9X6T+AHBgkmsYnEJaBTya5AXA7sBiBlE5OMn+k++cZFmS8STjExMTG3NuSdrkjTIQq4Adh5YXd+seV1V3V9XhVbUn8KFu3QMMjiauqKrVVbUa+DrwyslPUFWnV9VYVY0tXLhwVN+HJM1JowzElcBuSXZJMh94M3DB8A5JFiRZM8PxwPLu9p0MjizmJdmCwdGFp5gkaSMaWSCq6hHgWOAiBv9z/1JV3ZTkxCSv73Y7CLg1yW3A9sBHuvXnAT8AbmBwneK6qvq3Uc0qSXqyVFXfM8yIsbGxGh8f73sMSXpGSXJVVY21tvV9kVqSNEsZCElSk4GQJDUZCElSk4GQJDUZCElSk4GQJDUZCElSk4GQJDUZCElSk4GQJDUZCElSk4GQJDUZCElSk4GQJDUZCElSk4GQJDUZCElSk4GQJDUZCElSk4GQJDUZCElSk4GQJDUZCElSk4GQJDUZCElSk4GQJDUZCElSk4GQJDUZCElSk4GQJDWNNBBJDklya5IVSY5rbN85ySVJrk9yWZLFQ9t2SnJxkluS3JxkyShnlSStbWSBSLI5cApwKLAUOCLJ0km7nQScWVV7ACcC/zC07UzgY1W1O7A3cO+oZpUkPdkojyD2BlZU1e1V9TBwLnDYpH2WApd2t7+1ZnsXknlV9U2AqlpdVQ+NcFZJ0iSjDMQi4K6h5ZXdumHXAYd3t98AbJ3k+cALgQeSnJ/kmiQf645I1pJkWZLxJOMTExMj+BYkae7q+yL1B4ADk1wDHAisAh4F5gH7d9tfAewKHDX5zlV1elWNVdXYwoULN9rQkjQXjDIQq4Adh5YXd+seV1V3V9XhVbUn8KFu3QMMjjau7U5PPQJ8FdhrhLNKkiYZZSCuBHZLskuS+cCbgQuGd0iyIMmaGY4Hlg/dd5skaw4LDgZuHuGskqRJRhaI7jf/Y4GLgFuAL1XVTUlOTPL6breDgFuT3AZsD3yku++jDE4vXZLkBiDAZ0Y1qyTpyVJVfc8wI8bGxmp8fLzvMSTpGSXJVVU11trW90VqSdIsZSAkSU0GQpLUZCAkSU0GQpLUZCAkSU0GQpLUZCAkSU0GQpLUZCAkSU0GQpLUZCAkSU0GQpLUZCAkSU0GQpLUZCAkSU0GQpLUZCAkSU0GQpLUZCAkSU0GQpLUZCAkSU0GQpLUZCAkSU2pqr5nmBFJJoA7nsZDLAB+PEPjPNP5WqzN12Ntvh5P2BRei52ramFrwyYTiKcryXhVjfU9x2zga7E2X4+1+Xo8YVN/LTzFJElqMhCSpCYD8YTT+x5gFvG1WJuvx9p8PZ6wSb8WXoOQJDV5BCFJajIQkqSmOR+IJIckuTXJiiTH9T1Pn5LsmORbSW5OclOSd/c9U9+SbJ7kmiRf63uWviXZJsl5Sf4ryS1JXtn3TH1K8t7u5+TGJOckeXbfM820OR2IJJsDpwCHAkuBI5Is7XeqXj0CvL+qlgL7AsfM8dcD4N3ALX0PMUv8M/CNqvpt4KXM4dclySLgXcBYVb0E2Bx4c79Tzbw5HQhgb2BFVd1eVQ8D5wKH9TxTb6rqnqq6urv9Uwb/A1jU71T9SbIY+D3gs33P0rckvwYcAHwOoKoerqoH+p2qd/OA5ySZB2wJ3N3zPDNurgdiEXDX0PJK5vD/EIclWQLsCXyv30l69Ungr4DH+h5kFtgFmAA+351y+2yS5/Y9VF+qahVwEnAncA/wYFVd3O9UM2+uB0INSbYCvgy8p6p+0vc8fUjy+8C9VXVV37PMEvOAvYBTq2pP4GfAnL1ml2RbBmcbdgF+E3hukrf2O9XMm+uBWAXsOLS8uFs3ZyXZgkEczq6q8/uep0f7Aa9P8j8MTj0enOSsfkfq1UpgZVWtOaI8j0Ew5qrfAX5YVRNV9SvgfOBVPc804+Z6IK4EdkuyS5L5DC4yXdDzTL1JEgbnmG+pqo/3PU+fqur4qlpcVUsY/HdxaVVtcr8hrq+q+hFwV5IXdateA9zc40h9uxPYN8mW3c/Na9gEL9rP63uAPlXVI0mOBS5i8C6E5VV1U89j9Wk/4G3ADUmu7db9dVVd2ONMmj3+Aji7+2XqduDonufpTVV9L8l5wNUM3v13DZvgx274URuSpKa5fopJkjQFAyFJajIQkqQmAyFJajIQkqQmAyHNAkkO8hNjNdsYCElSk4GQnoIkb03y/STXJvl09/ciVif5RPe3AS5JsrDb92VJrkhyfZKvdJ/fQ5IXJPmPJNcluTrJb3UPv9XQ31s4u/sXulJvDIS0npLsDrwJ2K+qXgY8CrwFeC4wXlUvBr4NnNDd5Uzgg1W1B3DD0PqzgVOq6qUMPr/nnm79nsB7GPxtkl0Z/Mt2qTdz+qM2pKfoNcDLgSu7X+6fA9zL4OPA/6Xb5yzg/O7vJ2xTVd/u1n8B+NckWwOLquorAFX1C4Du8b5fVSu75WuBJcB3Rv9tSW0GQlp/Ab5QVcevtTL520n7bejn1/xy6Paj+POpnnmKSVp/lwBvTPLrAEm2S7Izg5+jN3b7/Anwnap6ELg/yf7d+rcB3+7+Ut/KJH/YPcazkmy5Ub8LaT35G4q0nqrq5iR/A1ycZDPgV8AxDP54zt7dtnsZXKcAOBI4rQvA8Kefvg34dJITu8f4o434bUjrzU9zlZ6mJKuraqu+55BmmqeYJElNHkFIkpo8gpAkNRkISVKTgZAkNRkISVKTgZAkNf0/cvxPvend+dQAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "best hyperparams:\n",
      "{\n",
      "    \"ChooseOneStepOf\": {\n",
      "        \"DecisionTreeClassifier\": {\n",
      "            \"Optional(DecisionTreeClassifier)\": {\n",
      "                \"ccp_alpha\": 0.0,\n",
      "                \"class_weight\": null,\n",
      "                \"criterion\": \"gini\",\n",
      "                \"max_depth\": null,\n",
      "                \"max_features\": null,\n",
      "                \"max_leaf_nodes\": null,\n",
      "                \"min_impurity_decrease\": 0.0,\n",
      "                \"min_impurity_split\": null,\n",
      "                \"min_samples_leaf\": 1,\n",
      "                \"min_samples_split\": 2,\n",
      "                \"min_weight_fraction_leaf\": 0.0,\n",
      "                \"presort\": \"deprecated\",\n",
      "                \"random_state\": null,\n",
      "                \"splitter\": \"best\"\n",
      "            },\n",
      "            \"enabled\": true\n",
      "        },\n",
      "        \"LogisticRegression\": {\n",
      "            \"Optional(LogisticRegression)\": {\n",
      "                \"SKLearnWrapper_LogisticRegression\": {\n",
      "                    \"C\": 1.0,\n",
      "                    \"class_weight\": null,\n",
      "                    \"dual\": false,\n",
      "                    \"fit_intercept\": true,\n",
      "                    \"intercept_scaling\": 1,\n",
      "                    \"l1_ratio\": null,\n",
      "                    \"max_iter\": 100,\n",
      "                    \"multi_class\": \"auto\",\n",
      "                    \"n_jobs\": null,\n",
      "                    \"penalty\": \"l2\",\n",
      "                    \"random_state\": null,\n",
      "                    \"solver\": \"lbfgs\",\n",
      "                    \"tol\": 0.0001,\n",
      "                    \"verbose\": 0,\n",
      "                    \"warm_start\": false\n",
      "                }\n",
      "            },\n",
      "            \"enabled\": false\n",
      "        },\n",
      "        \"RidgeClassifier\": {\n",
      "            \"Optional(RidgeClassifier)\": {\n",
      "                \"SKLearnWrapper_RidgeClassifier\": {\n",
      "                    \"alpha\": 1.0,\n",
      "                    \"class_weight\": null,\n",
      "                    \"copy_X\": true,\n",
      "                    \"fit_intercept\": true,\n",
      "                    \"max_iter\": null,\n",
      "                    \"normalize\": false,\n",
      "                    \"random_state\": null,\n",
      "                    \"solver\": \"auto\",\n",
      "                    \"tol\": 0.001\n",
      "                }\n",
      "            },\n",
      "            \"enabled\": false\n",
      "        },\n",
      "        \"choice\": \"LogisticRegression\"\n",
      "    }\n",
      "}\n"
     ]
    }
   ],
   "source": [
    "from sklearn.datasets import make_classification\n",
    "from sklearn.model_selection import train_test_split\n",
    "import shutil\n",
    "\n",
    "def generate_classification_data():\n",
    "    data_inputs, expected_outputs = make_classification(\n",
    "        n_samples=10000,\n",
    "        n_repeated=0,\n",
    "        n_classes=3,\n",
    "        n_features=4,\n",
    "        n_clusters_per_class=1,\n",
    "        class_sep=1.5,\n",
    "        flip_y=0,\n",
    "        weights=[0.5, 0.5, 0.5]\n",
    "    )\n",
    "\n",
    "    X_train, X_test, y_train, y_test = train_test_split(\n",
    "        data_inputs,\n",
    "        expected_outputs,\n",
    "        test_size=0.20\n",
    "    )\n",
    "\n",
    "    return X_train, y_train, X_test, y_test\n",
    "\n",
    "X_train, y_train, X_test, y_test = generate_classification_data()\n",
    "auto_ml = auto_ml.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Get best model, and predict"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test accuracy score: 0.984\n"
     ]
    }
   ],
   "source": [
    "best_pipeline = auto_ml.get_best_model()\n",
    "y_pred = best_pipeline.predict(X_test)\n",
    "\n",
    "accuracy = accuracy_score(y_true=y_test, y_pred=y_pred)\n",
    "print(\"Test accuracy score:\", accuracy)\n",
    "shutil.rmtree(tmpdir)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "neuraxle_documentation",
   "language": "python",
   "name": "neuraxle_documentation"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
