
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/sklearn/plot_boston_housing_regression_with_model_stacking.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_sklearn_plot_boston_housing_regression_with_model_stacking.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_sklearn_plot_boston_housing_regression_with_model_stacking.py:


Boston Housing Regression
==========================

This example solves a regression problem using a pipeline with the following steps:

 - Feature augmentation with PCA and Fast ICA,
 - A Pre-regression using an ensemble containing gradient boosted, and a KMeans clustering for even more features in the stacking,
 - The model stacking using a ridge regression.

This example also prints the shapes of the objects between the pipeline elements.

..
    Copyright 2019, Neuraxio Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

..
    Thanks to Umaneo Technologies Inc. for their contributions to this Machine Learning
    project, visit https://www.umaneo.com/ for more information on Umaneo Technologies Inc.

.. GENERATED FROM PYTHON SOURCE LINES 33-96




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/gui/Documents/GIT/www.neuraxle.org-builder/venv/lib/python3.8/site-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function load_boston is deprecated; `load_boston` is deprecated in 1.0 and will be removed in 1.2.

        The Boston housing prices dataset has an ethical problem. You can refer to
        the documentation of this function for further details.

        The scikit-learn maintainers therefore strongly discourage the use of this
        dataset unless the purpose of the code is to study and educate about
        ethical issues in data science and machine learning.

        In this special case, you can fetch the dataset from the original
        source::

            import pandas as pd
            import numpy as np


            data_url = "http://lib.stat.cmu.edu/datasets/boston"
            raw_df = pd.read_csv(data_url, sep="\s+", skiprows=22, header=None)
            data = np.hstack([raw_df.values[::2, :], raw_df.values[1::2, :2]])
            target = raw_df.values[1::2, 2]

        Alternative datasets include the California housing dataset (i.e.
        :func:`~sklearn.datasets.fetch_california_housing`) and the Ames housing
        dataset. You can load the datasets as follows::

            from sklearn.datasets import fetch_california_housing
            housing = fetch_california_housing()

        for the California housing dataset and::

            from sklearn.datasets import fetch_openml
            housing = fetch_openml(name="house_prices", as_frame=True)

        for the Ames housing dataset.
    
      warnings.warn(msg, category=FutureWarning)
    Fitting on train:
    NumpyShapePrinter: (379, 13) 
    NumpyShapePrinter: (379, 17) 

    Transforming train and test:
    NumpyShapePrinter: (379, 13) 
    NumpyShapePrinter: (379, 17) 
    NumpyShapePrinter: (379,) 
    NumpyShapePrinter: (127, 13) 
    NumpyShapePrinter: (127, 17) 
    NumpyShapePrinter: (127,) 

    Evaluating transformed train:
    R2 regression score: 0.9997216058471721

    Evaluating transformed test:
    R2 regression score: 0.9121752499875265






|

.. code-block:: default


    import numpy as np
    from sklearn.cluster import KMeans
    from sklearn.datasets import load_boston
    from sklearn.decomposition import PCA, FastICA
    from sklearn.ensemble import GradientBoostingRegressor
    from sklearn.metrics import r2_score
    from sklearn.model_selection import train_test_split
    from sklearn.utils import shuffle

    from neuraxle.pipeline import Pipeline
    from neuraxle.steps.numpy import NumpyShapePrinter
    from neuraxle.steps.sklearn import RidgeModelStacking
    from neuraxle.union import AddFeatures


    def main():
        boston = load_boston()
        X, y = shuffle(boston.data, boston.target, random_state=13)
        X = X.astype(np.float32)
        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, shuffle=False)

        p = Pipeline([
            NumpyShapePrinter(),
            AddFeatures([
                PCA(n_components=2),
                FastICA(n_components=2),
            ]),
            NumpyShapePrinter(),
            RidgeModelStacking([
                GradientBoostingRegressor(),
                GradientBoostingRegressor(n_estimators=500),
                GradientBoostingRegressor(max_depth=5),
                KMeans(),
            ]),
            NumpyShapePrinter(),
        ])

        print("Fitting on train:")
        p = p.fit(X_train, y_train)
        print("")
        print("Transforming train and test:")
        y_train_predicted = p.predict(X_train)
        y_test_predicted = p.predict(X_test)
        print("")
        print("Evaluating transformed train:")
        score_train = r2_score(y_train_predicted, y_train)
        print('R2 regression score:', score_train)
        print("")
        print("Evaluating transformed test:")
        score_test = r2_score(y_test_predicted, y_test)
        print('R2 regression score:', score_test)

        assert y_train_predicted.shape == (379,)
        assert y_test_predicted.shape == (127,)
        assert isinstance(score_train, float)
        assert isinstance(score_test, float)

        return y_train_predicted, y_test_predicted, score_train, score_test


    if __name__ == "__main__":
        main()


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  2.916 seconds)


.. _sphx_glr_download_examples_sklearn_plot_boston_housing_regression_with_model_stacking.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example


  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/Neuraxio/Neuraxle/master?urlpath=lab/tree/notebooks/examples/sklearn/plot_boston_housing_regression_with_model_stacking.ipynb
      :alt: Launch binder
      :width: 150 px


  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_boston_housing_regression_with_model_stacking.py <plot_boston_housing_regression_with_model_stacking.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_boston_housing_regression_with_model_stacking.ipynb <plot_boston_housing_regression_with_model_stacking.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
