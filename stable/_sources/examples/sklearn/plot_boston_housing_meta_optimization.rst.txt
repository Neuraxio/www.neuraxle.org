
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/sklearn/plot_boston_housing_meta_optimization.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_sklearn_plot_boston_housing_meta_optimization.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_sklearn_plot_boston_housing_meta_optimization.py:


Boston Housing Regression with Meta Optimization
================================================

This is an automatic machine learning example. It is more sophisticated than the other simple regression example.
Not only a pipeline is defined, but also an hyperparameter space is defined for the pipeline. Then, a random search is
performed to find the best possible combination of hyperparameters by sampling randomly in the hyperparameter space.

..
    Copyright 2019, Neuraxio Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

..
    Thanks to Umaneo Technologies Inc. for their contributions to this Machine Learning
    project, visit https://www.umaneo.com/ for more information on Umaneo Technologies Inc.

.. GENERATED FROM PYTHON SOURCE LINES 29-128




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/gui/Documents/GIT/www.neuraxle.org-builder/venv/lib/python3.8/site-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function load_boston is deprecated; `load_boston` is deprecated in 1.0 and will be removed in 1.2.

        The Boston housing prices dataset has an ethical problem. You can refer to
        the documentation of this function for further details.

        The scikit-learn maintainers therefore strongly discourage the use of this
        dataset unless the purpose of the code is to study and educate about
        ethical issues in data science and machine learning.

        In this special case, you can fetch the dataset from the original
        source::

            import pandas as pd
            import numpy as np


            data_url = "http://lib.stat.cmu.edu/datasets/boston"
            raw_df = pd.read_csv(data_url, sep="\s+", skiprows=22, header=None)
            data = np.hstack([raw_df.values[::2, :], raw_df.values[1::2, :2]])
            target = raw_df.values[1::2, 2]

        Alternative datasets include the California housing dataset (i.e.
        :func:`~sklearn.datasets.fetch_california_housing`) and the Ames housing
        dataset. You can load the datasets as follows::

            from sklearn.datasets import fetch_california_housing
            housing = fetch_california_housing()

        for the California housing dataset and::

            from sklearn.datasets import fetch_openml
            housing = fetch_openml(name="house_prices", as_frame=True)

        for the Ames housing dataset.
    
      warnings.warn(msg, category=FutureWarning)
    Meta-fitting on train:

    Transforming train and test:

    Evaluating transformed train:
    R2 regression score: 0.9003287315482011

    Evaluating transformed test:
    R2 regression score: 0.76438524731767






|

.. code-block:: default


    import numpy as np
    from sklearn.cluster import KMeans
    from sklearn.datasets import load_boston
    from sklearn.decomposition import PCA, FastICA
    from sklearn.ensemble import GradientBoostingRegressor
    from sklearn.linear_model import Ridge
    from sklearn.metrics import r2_score, mean_squared_error
    from sklearn.model_selection import train_test_split
    from sklearn.utils import shuffle

    from neuraxle.hyperparams.distributions import RandInt, LogUniform, Boolean
    from neuraxle.hyperparams.space import HyperparameterSpace
    from neuraxle.metaopt.auto_ml import AutoML, InMemoryHyperparamsRepository, ValidationSplitter
    from neuraxle.metaopt.callbacks import MetricCallback, ScoringCallback
    from neuraxle.pipeline import Pipeline
    from neuraxle.steps.numpy import NumpyTranspose
    from neuraxle.steps.sklearn import SKLearnWrapper
    from neuraxle.union import AddFeatures, ModelStacking


    def main(tmpdir):
        boston = load_boston()
        X, y = shuffle(boston.data, boston.target, random_state=13)
        X = X.astype(np.float32)
        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, shuffle=False)

        # Note that the hyperparameter spaces are defined here during the pipeline definition, but it could be already set
        # within the classes ar their definition if using custom classes, or also it could be defined after declaring the
        # pipeline using a flat dict or a nested dict.

        p = Pipeline([
            AddFeatures([
                SKLearnWrapper(
                    PCA(n_components=2),
                    HyperparameterSpace({"n_components": RandInt(1, 3)})
                ),
                SKLearnWrapper(
                    FastICA(n_components=2),
                    HyperparameterSpace({"n_components": RandInt(1, 3)})
                ),
            ]),
            ModelStacking([
                SKLearnWrapper(
                    GradientBoostingRegressor(),
                    HyperparameterSpace({
                        "n_estimators": RandInt(50, 300), "max_depth": RandInt(1, 4),
                        "learning_rate": LogUniform(0.07, 0.7)
                    })
                ),
                SKLearnWrapper(
                    KMeans(),
                    HyperparameterSpace({"n_clusters": RandInt(5, 10)})
                ),
            ],
                joiner=NumpyTranspose(),
                judge=SKLearnWrapper(
                    Ridge(),
                    HyperparameterSpace({"alpha": LogUniform(0.7, 1.4), "fit_intercept": Boolean()})
                ),
            )
        ])

        print("Meta-fitting on train:")
        auto_ml = AutoML(
            p,
            validation_splitter=ValidationSplitter(0.20),
            refit_trial=True,
            n_trials=10,
            epochs=1,  # 1 epoc here due to using sklearn models that just fit once.
            cache_folder_when_no_handle=str(tmpdir),
            scoring_callback=ScoringCallback(mean_squared_error, higher_score_is_better=False),
            callbacks=[MetricCallback('mse', metric_function=mean_squared_error, higher_score_is_better=False)],
            hyperparams_repository=InMemoryHyperparamsRepository(cache_folder=str(tmpdir))
        )

        random_search = auto_ml.fit(X_train, y_train)
        p = random_search.get_best_model()
        print("")

        print("Transforming train and test:")
        y_train_predicted = p.predict(X_train)
        y_test_predicted = p.predict(X_test)

        print("")

        print("Evaluating transformed train:")
        score_transform = r2_score(y_train_predicted, y_train)
        print('R2 regression score:', score_transform)

        print("")

        print("Evaluating transformed test:")
        score_test = r2_score(y_test_predicted, y_test)
        print('R2 regression score:', score_test)


    if __name__ == "__main__":
        main('cache')


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  19.661 seconds)


.. _sphx_glr_download_examples_sklearn_plot_boston_housing_meta_optimization.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example


  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/Neuraxio/Neuraxle/master?urlpath=lab/tree/notebooks/examples/sklearn/plot_boston_housing_meta_optimization.ipynb
      :alt: Launch binder
      :width: 150 px


  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_boston_housing_meta_optimization.py <plot_boston_housing_meta_optimization.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_boston_housing_meta_optimization.ipynb <plot_boston_housing_meta_optimization.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
