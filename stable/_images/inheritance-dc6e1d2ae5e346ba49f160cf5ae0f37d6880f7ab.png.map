<map id="inheritance04fd610fb2" name="inheritance04fd610fb2">
<area shape="rect" id="node1" title="Helper class that provides a standard way to create an ABC using" alt="" coords="45,116,113,142"/>
<area shape="rect" id="node2" href="api/neuraxle.pipeline.html#neuraxle.pipeline.BasePipeline" target="_top" title="BasePipeline" alt="" coords="246,116,369,142"/>
<area shape="rect" id="node13" href="api/neuraxle.pipeline.html#neuraxle.pipeline.Pipeline" target="_top" title="Fits and transform steps" alt="" coords="550,103,639,130"/>
<area shape="rect" id="node3" href="api/neuraxle.base.html#neuraxle.base.TruncableSteps" target="_top" title="Step that contains multiple steps. :class:`Pipeline` inherits form this class." alt="" coords="9,189,149,215"/>
<area shape="rect" id="node7" href="api/neuraxle.union.html#neuraxle.union.FeatureUnion" target="_top" title="Parallelize the union of many pipeline steps." alt="" coords="1095,226,1218,252"/>
<area shape="rect" id="node4" href="api/distributed/neuraxle.distributed.streaming.html#neuraxle.distributed.streaming.BaseQueuedPipeline" target="_top" title="Sub class of :class:`Pipeline`." alt="" coords="1070,103,1244,130"/>
<area shape="rect" id="node16" href="api/distributed/neuraxle.distributed.streaming.html#neuraxle.distributed.streaming.ParallelQueuedFeatureUnion" target="_top" title="Using :class:`QueueWorker`, run all steps in parallel using QueueWorkers." alt="" coords="1289,103,1531,130"/>
<area shape="rect" id="node5" href="api/neuraxle.pipeline.html#neuraxle.pipeline.MiniBatchSequentialPipeline" target="_top" title="Mini Batch Sequential Pipeline class to create a pipeline processing data inputs in batch." alt="" coords="774,103,1024,130"/>
<area shape="rect" id="node6" href="api/neuraxle.base.html#neuraxle.base.BaseTransformer" target="_top" title="Base class for a pipeline step that can only be transformed." alt="" coords="5,5,154,32"/>
<area shape="rect" id="node15" href="api/steps/neuraxle.steps.numpy.html#neuraxle.steps.numpy.NumpyConcatenateOnAxis" target="_top" title="Numpy concetenation step where the concatenation is performed along the specified custom axis." alt="" coords="203,5,411,32"/>
<area shape="rect" id="node8" href="api/neuraxle.base.html#neuraxle.base.ForceHandleOnlyMixin" target="_top" title="A step that automatically calls handle methods in the transform, fit, and fit_transform methods." alt="" coords="803,202,995,228"/>
<area shape="rect" id="node9" href="api/neuraxle.base.html#neuraxle.base.ForceHandleMixin" target="_top" title="A step that automatically calls handle methods in the transform, fit, and fit_transform methods." alt="" coords="516,152,673,179"/>
<area shape="rect" id="node10" href="api/neuraxle.base.html#neuraxle.base.MixinForBaseTransformer" target="_top" title="Any steps/transformers within a pipeline that inherits of this class should implement BaseStep/BaseTransformer and initialize it before any mixin. This class checks that its the case at initialization." alt="" coords="199,178,416,204"/>
<area shape="rect" id="node11" href="api/neuraxle.base.html#neuraxle.base.HandleOnlyMixin" target="_top" title="A pipeline step that only requires the implementation of handler methods :" alt="" coords="520,202,669,228"/>
<area shape="rect" id="node12" href="api/neuraxle.base.html#neuraxle.base._CustomHandlerMethods" target="_top" title="A class to represent a step that needs to add special behavior on top of the normal handler methods." alt="" coords="495,54,694,81"/>
<area shape="rect" id="node14" href="api/steps/neuraxle.steps.numpy.html#neuraxle.steps.numpy.NumpyConcatenateInnerFeatures" target="_top" title="Numpy concatenation step where the concatenation is performed along `axis=&#45;1`." alt="" coords="461,5,728,32"/>
</map>
